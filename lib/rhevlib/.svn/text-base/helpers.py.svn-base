# Written By: Scott McCarty
# Date: 06/2014
# Purpose: helper functions to assist in interaction with RHEV-M
# Concepts developed from: https://access.redhat.com/site/documentation/en-US/Red_Hat_Enterprise_Virtualization/3.2/html/Developer_Guide/Further_Python_SDK_Examples.html

# RHEV modules 
from ovirtsdk.api import API
from ovirtsdk.xml import params
from time import sleep as sleep

def create_vm(api, cluster_name, vm_name, vm_memory):
    vm_os = params.OperatingSystem(boot=[params.Boot(dev="hd")])
    vm_template = api.templates.get(name="Blank")
    vm_cluster = api.clusters.get(name=cluster_name)
    vm_params = params.VM(name=vm_name,memory=vm_memory,cluster=vm_cluster,template=vm_template,os=vm_os)
    vm = api.vms.add(vm=vm_params)
    print "Virtual machine '%s' added." % vm_name
    return vm

def create_template(api, vm, template_name, vm_name, storage_domain):

    # Remove old template
    template = api.templates.get(template_name)
    if template:
        template.delete()

    # Create new template
    template =  api.templates.add(params.Template(name=template_name, vm=api.vms.get(vm_name), cluster=api.clusters.get(storage_domain)))
    print "Template '%s' added." % template_name
    return template

def add_nic(api, vm, network_name, nic_name):
    nic_interface = "virtio"
    nic_network = api.networks.get(name=network_name)
    nic_params = params.NIC(name=nic_name,interface=nic_interface,network=nic_network)
    nic = vm.nics.add(nic_params)
    print "Network interface '%s' added to '%s'." % (nic.get_name(), vm.get_name())
    return nic

def add_disk(api, vm, disk_size, storage_domain):
    disk_type = "system"
    disk_interface = "virtio"
    disk_format = "cow"
    disk_bootable = True
    sd = params.StorageDomains(storage_domain=[api.storagedomains.get(name=storage_domain)])
    disk_params = params.Disk(storage_domains=sd,size=disk_size,type_=disk_type,interface=disk_interface,format=disk_format,bootable=disk_bootable)
    disk_storage_domain = params.StorageDomains(storage_domain=[api.storagedomains.get(name="data1")])
    disk = vm.disks.add(disk_params)
    print "Disk '%s' added to '%s'." % (disk.get_name(), vm.get_name())
    return disk

def add_cdrom(api, vm):
    sd1 = api.storagedomains.get(name="ISO")
    cd_iso = sd1.files.get(name="generated.iso")
    cd_params = params.CdRom(file=cd_iso)
    vm.cdroms.add(cd_params)
    print "Attached CD to '%s'." % vm.get_name()
 
def wait_for(status, f, max_pause=60):
    pause = 5
    total_pause = 0
    while status != f:
        total_pause = total_pause + pause
        if total_pause < max_pause:
            sleep(pause)
        else:
            print "Reached timeout: " + str(max_pause) + " Status: " + f
            return

    print "Status: " + str(status)
